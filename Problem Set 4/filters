#include "helpers.h"
#include <math.h>

// Convert image to grayscale
void grayscale(int height, int width, RGBTRIPLE image[height][width])
{
    for (int i = 0; i < height; i++)
    {
        for (int j = 0; j < width; j++)
        {
            float avg = round(((image[i][j].rgbtBlue + image[i][j].rgbtGreen + image[i][j].rgbtRed) / 3.0));

            image[i][j].rgbtBlue = avg;
            image[i][j].rgbtGreen = avg;
            image[i][j].rgbtRed = avg;
        }
    }

    return;
}

// Convert image to sepia
void sepia(int height, int width, RGBTRIPLE image[height][width])
{
    for (int i = 0; i < height; i++)
    {
        for (int j = 0; j < width; j++)
        {
            float sepiaRed = round((.393 * image[i][j].rgbtRed) + (.769 * image[i][j].rgbtGreen) + (.189 * image[i][j].rgbtBlue));
            float sepiaGreen = round((.349 * image[i][j].rgbtRed) + (.686 * image[i][j].rgbtGreen) + (.168 * image[i][j].rgbtBlue));
            float sepiaBlue = round((.272 * image[i][j].rgbtRed) + (.534 * image[i][j].rgbtGreen) + (.131 * image[i][j].rgbtBlue));

            if (sepiaRed > 255)
            {
                sepiaRed = 255;
            }

            if (sepiaGreen > 255)
            {
                sepiaGreen = 255;
            }

            if (sepiaBlue > 255)
            {
                sepiaBlue = 255;
            }

            image[i][j].rgbtRed = sepiaRed;
            image[i][j].rgbtGreen = sepiaGreen;
            image[i][j].rgbtBlue = sepiaBlue;

        }
    }

    return;
}

// Reflect image horizontally
void reflect(int height, int width, RGBTRIPLE image[height][width])
{
    for (int i = 0; i < height; i++)
    {
        for (int j = 0; j < width /2; j++)
        {
            int tmpRed = 0;
            int tmpGreen = 0;
            int tmpBlue = 0;

            tmpRed = image[i][j].rgbtRed;
            tmpGreen = image[i][j].rgbtGreen;
            tmpBlue = image[i][j].rgbtBlue;

            image[i][j].rgbtRed = image[i][(width - 1) - j].rgbtRed;
            image[i][j].rgbtGreen = image[i][(width - 1) - j].rgbtGreen;
            image[i][j].rgbtBlue = image[i][(width - 1) - j].rgbtBlue;

            image[i][(width - 1) - j].rgbtRed = tmpRed;
            image[i][(width - 1) - j].rgbtGreen = tmpGreen;
            image[i][(width - 1) - j].rgbtBlue = tmpBlue;

        }
    }
    return;
}

// Blur image
void blur(int height, int width, RGBTRIPLE image[height][width])
{
    RGBTRIPLE copy[height][width];
    float sum_red;
    float sum_green;
    float sum_blue;
    float counter;

    //Create a copy of the original image
    for (int i = 0; i < height; i++)
    {
        for (int j = 0; j < width; j++)
        {
            copy[i][j] = image[i][j];
        }
    }


    //iterates through each pixel of the array
    for (int i = 0; i < height; i++)
    {
        for (int j = 0; j < width; j++)
        {

            sum_red = 0.0;
            sum_green = 0.0;
            sum_blue = 0.0;
            counter = 0.0;

            //iterates 9 pixels around the main pixel
            for(int k = i - 1; k <= i + 1; k++)
            {
                //check for invalid rows first
                if (k < 0 || k > height - 1) //edge cases
                {
                    continue;
                }

                for (int l = j - 1; l <= j + 1; l++)
                {
                    //check for invalid pixels horizontally
                    if (l < 0 || l > width - 1) //edge cases
                    {
                        continue;
                    }

                    //grab each of the 9 pixel's RGB values and sum them
                    sum_red += image[k][l].rgbtRed;
                    sum_green += image[k][l].rgbtGreen;
                    sum_blue += image[k][l].rgbtBlue;
                    counter++;

                }
            }

            //Average the sum values by the count of pixels and add them to the copy array
            copy[i][j].rgbtRed = round(sum_red / counter);
            copy[i][j].rgbtGreen = round(sum_green / counter);
            copy[i][j].rgbtBlue = round(sum_blue / counter);


        }
    }

    //Iterate through the real array one more time and copy all of the avg values from the copy array
    //to the real array
    for (int i = 0; i < height; i++)
    {
        for (int j = 0; j < width; j++)
        {
            image[i][j].rgbtRed = copy[i][j].rgbtRed;
            image[i][j].rgbtGreen = copy[i][j].rgbtGreen;
            image[i][j].rgbtBlue = copy[i][j].rgbtBlue;
        }
    }


    return;
}
