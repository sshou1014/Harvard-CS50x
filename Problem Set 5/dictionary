// Implements a dictionary's functionality

#include <stdbool.h>
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <ctype.h>

#include "dictionary.h"

//I put a global variable int size_counter to use in counting each word loaded from the dictionary
int size_counter = 0;

// Represents a node in a hash table
typedef struct node
{
    char word[LENGTH + 1];
    struct node *next;
}
node;

// Number of buckets in hash table
const unsigned int N = 65536;

// Hash table
node *table[N];

// Returns true if word is in dictionary, else false
bool check(const char *word)
{
    //Create a temporary char array with blank values to store word because *word cannot be changed because of const
    char wordCopy[LENGTH + 1] = "";

    //Iterate through the word and turn each char to lowercase, copy into temp array
    for (int i = 0, j = strlen(word); i < j; i++)
    {
        wordCopy[i] = tolower(word[i]);
    }

    //Hash word to obtain a hash value
    int index = hash(wordCopy);

    //Create a head node to point to beginning of hash table
    node *cursor = table[index];


    while (cursor != NULL)
    {
        if (strcmp(cursor->word, wordCopy) == 0)
        {
            return true;
        }

        else
        {
            cursor = cursor->next;
        }


    }

    return false;

}

// Hashes word to a number, SOURCE: https://www.reddit.com/r/cs50/comments/1x6vc8/pset6_trie_vs_hashtable/cf9nlkn/
unsigned int hash(const char *word)
{
    unsigned int hash = 0;
    for (int i = 0, n = strlen(word); i < n; i++)
    {
        hash = (hash << 2) ^ word[i];
    }
    return hash % N;
}

// Loads dictionary into memory, returning true if successful, else false
bool load(const char *dictionary)
{
    //Open the file and set it to Read, check for NULL
    FILE *file = fopen(dictionary, "r");
    if (file == NULL)
    {
        printf("Could not open dictionary.\n");
        return false;
    }

    //Create a buffer array to store a word and read into it
    char buffer[LENGTH + 1];


    //Use fscanf to iterate through each word in the file
    while (fscanf(file, "%s", buffer) != EOF)
    {
        //Create a new node
        node *n = malloc(sizeof(node));
        if (n == NULL)
        {
            unload();
            return false;
        }

        //Copy the word in buffer to the array in n
        strcpy(n->word, buffer);


        //Use the hash function to hash the word
        int index = hash(n->word);

        //Check if the table index location is NULL, if it is then insert node and put node address as null to signify it is last
        if (table[index] == NULL)
        {
            table[index] = n;
            n->next = NULL;
        }

        //If the table index location is NOT NULL (something is there aka collision), append the new node as the head of the linked list
        else
        {
            n->next = table[index]; //point first to the current head of the linked list
            table[index] = n; //insert into linked list as the new head
        }

        //Add counter for word count
        size_counter++;

    }

    //close file and return true
    fclose(file);
    return true;
}

// Returns number of words in dictionary if loaded, else 0 if not yet loaded
unsigned int size(void)
{
    if (size_counter > 0)
    {
        return size_counter;
    }

    else
    {
        return 0;
    }
}

// Unloads dictionary from memory, returning true if successful, else false
bool unload(void)
{
    node *tmp;
    node *cursor;

    for (int n = 0; n < N; n++)
    {
        cursor = table[n];

        while (cursor != NULL)
        {
            tmp = cursor;
            cursor = cursor->next;
            free(tmp);
        }
    }

    if (table[N - 1] == NULL)
    {
        return true;
    }

    else
    {
        return false;
    }

}
